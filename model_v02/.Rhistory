print(nrow(bigram.in))
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
}
# vector of suggested words with probability
wordRecommend
#      as.character(wordRecommend[1,])
}
nextWordPrediction("first")
nextWordPrediction("second")
nextWordPrediction("third")
nextWordPrediction("fourth")
nextWordPrediction("sixth")
tail(unigram.wf)
nextWordPrediction <- function(rawinput, numRecommend = 3, rawpred = NULL) {
predict.vector <- 1:3
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
if(is.null(rawpred)) {
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(10,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(10,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off for advanced search
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
} else {
if(is.null(rawpred)) {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(10,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.unigram)
}
print(nrow(bigram.in))
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
}
# vector of suggested words with probability
wordRecommend
#      as.character(wordRecommend[1,])
}
nextWordPrediction("this is")
nextWordPrediction("no")
nextWordPrediction <- function(rawinput, numRecommend = 3, rawpred = NULL) {
predict.vector <- 1:3
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
if(is.null(rawpred)) {
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(10,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(10,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off for advanced search
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
} else {
if(is.null(rawpred)) {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(10,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.unigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
}
# vector of suggested words with probability
wordRecommend
#      as.character(wordRecommend[1,])
}
nextWordPrediction("what is")
sample(1:10000, 3)
?sample
nextWordPrediction <- function(rawinput, numRecommend = 3, rawpred = NULL) {
predict.vector <- sample(1:nrow(unigram.wf), 3)
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
if(is.null(rawpred)) {
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off for advanced search
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
} else {
if(is.null(rawpred)) {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.unigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
}
# vector of suggested words with probability
wordRecommend
#      as.character(wordRecommend[1,])
}
nextWordPrediction("this is")
nextWordPrediction("no")
nextWordPrediction("not")
nextWordPrediction("insignificant")
nextWordPrediction("not true")
nextWordPrediction <- function(rawinput, numRecommend = 3, rawpred = NULL) {
predict.vector <- sample(nrow(unigram.wf)/2:nrow(unigram.wf), 3)
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
if(is.null(rawpred)) {
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off for advanced search
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
} else {
if(is.null(rawpred)) {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.unigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
}
# vector of suggested words with probability
wordRecommend
#      as.character(wordRecommend[1,])
}
nextWordPrediction("insulator")
1e6
nrow(unigram.wf)
nrow(unigram.wf)/2
nrow(unigram.wf)//2
nrow(unigram.wf)./2
nrow(unigram.wf)/.2
nextWordPrediction <- function(rawinput, numRecommend = 3, rawpred = NULL) {
predict.vector <- sample(nrow(unigram.wf)%/%2:nrow(unigram.wf), 3)
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
if(is.null(rawpred)) {
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off for advanced search
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
} else {
if(is.null(rawpred)) {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.unigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
}
# vector of suggested words with probability
wordRecommend
#      as.character(wordRecommend[1,])
}
nextWordPrediction("insulator")
nextWordPrediction("insignificant")
nextWordPrediction("insignificant")
nextWordPrediction("insignificant")
nextWordPrediction("insignificant")
sample(10, 3)
sample(5:10, 3)
sample(5:10, 3)
sample(5:10, 3)
sample(5:10, 3)
sample(5:10, 3)
sample(5:10, 3)
sample(5:10, 3)
nextWordPrediction <- function(rawinput, numRecommend = 3, rawpred = NULL) {
predict.vector <- sample(nrow(unigram.wf)%/%2, 3)
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
if(is.null(rawpred)) {
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off for advanced search
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
} else {
if(is.null(rawpred)) {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.unigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
}
# vector of suggested words with probability
wordRecommend
#      as.character(wordRecommend[1,])
}
nextWordPrediction("insignificant")
nextWordPrediction("insignificant")
nextWordPrediction("insignificant")
nextWordPrediction("insignificant")
head(unigram.wf)
tail(unigram.wf)
nextWordPrediction <- function(rawinput, numRecommend = 3, rawpred = NULL) {
predict.vector <- sample(nrow(unigram.wf)%/%10, 3)
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
if(is.null(rawpred)) {
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off for advanced search
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
} else {
if(is.null(rawpred)) {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.unigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
}
# vector of suggested words with probability
wordRecommend
#      as.character(wordRecommend[1,])
}
nextWordPrediction("insignificant")
nextWordPrediction <- function(rawinput, numRecommend = 3, rawpred = NULL) {
predict.vector <- sample(100, 3)
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
if(is.null(rawpred)) {
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off for advanced search
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
} else {
if(is.null(rawpred)) {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.unigram)
}
predict.words <- sapply(predict.vector,
function(ind) unigram.wf[index==ind, words])
} else {
predict.words <- rawpred
predict.vector <- sapply(predict.words,
function(wd) unigram.wf[words==wd, index])
}
# katz back-off
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
wordRecommend <- arrange(prob.df, desc(prob.vec)) %>% head(numRecommend) %>% t()
}
# vector of suggested words with probability
wordRecommend
#      as.character(wordRecommend[1,])
}
nextWordPrediction("insignificant")
nextWordPrediction("insignificant")
q()
