predict.vector <- rev(predict.vector)
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
# katz back-off for advanced search
if(katz) {
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
} else {
prob.vec <- unique(c(prob.unigram, prob.bigram, prob.trigram))
prob.vec <- rev(prob.vec)
}
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
} else {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, rev(predict.bigram))
# naive backoff
if(!katz) {
freq.tot <- sum(bigram.wf$freq)
prob.bigram <- sapply(rev(predict.bigram), function(x) bigram.in[ind2==x]$freq/freq.tot)
}
}
predict.vector <- rev(predict.vector)
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
# katz back-off
if(katz) {
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
} else {
prob.vec <- unique(c(prob.unigram, prob.bigram))
prob.vec <- rev(prob.vec)
}
}
# return a data table of word and probabilities
data.table(predictor = predict.words, probability = prob.vec)
}
nextWordPrediction("this is")
nextWordPrediction <- function(rawinput, katz = TRUE) {
predict.vector <- 3:1
# naive backoff
if(!katz) {
freq.tot <- sum(unigram.wf$freq)
prob.unigram <- sapply(predict.vector, function(x) unigram.wf[index==x]$freq/freq.tot)
}
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
print(length(predict.bigram))
predict.vector <- union(predict.vector, rev(predict.bigram))
# naive backoff
if(!katz) {
freq.tot <- sum(bigram.wf$freq)
prob.bigram <- sapply(rev(predict.bigram), function(x) bigram.in[ind2==x]$freq/freq.tot)
}
}
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
print(length(predict.trigram))
predict.vector <- union(predict.vector, rev(predict.trigram))
# naive backoff
if(!katz) {
freq.tot <- sum(trigram.wf$freq)
prob.trigram <- sapply(rev(predict.trigram), function(x) trigram.in[ind3==x]$freq/freq.tot)
}
}
predict.vector <- rev(predict.vector)
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
# katz back-off for advanced search
if(katz) {
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
} else {
prob.vec <- unique(c(prob.unigram, prob.bigram, prob.trigram))
prob.vec <- rev(prob.vec)
}
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
} else {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, rev(predict.bigram))
# naive backoff
if(!katz) {
freq.tot <- sum(bigram.wf$freq)
prob.bigram <- sapply(rev(predict.bigram), function(x) bigram.in[ind2==x]$freq/freq.tot)
}
}
predict.vector <- rev(predict.vector)
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
# katz back-off
if(katz) {
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
} else {
prob.vec <- unique(c(prob.unigram, prob.bigram))
prob.vec <- rev(prob.vec)
}
}
# return a data table of word and probabilities
data.table(predictor = predict.words, probability = prob.vec)
}
nextWordPrediction("this is")
nextWordPrediction("this is", FALSE)
nextWordPrediction <- function(rawinput, katz = TRUE) {
predict.unigram <- 3:1
# naive backoff
if(!katz) {
freq.tot <- sum(unigram.wf$freq)
prob.unigram <- sapply(predict.vector, function(x) unigram.wf[index==x]$freq/freq.tot)
}
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
# naive backoff
if(!katz) {
freq.tot <- sum(bigram.wf$freq)
prob.bigram <- sapply(rev(predict.bigram), function(x) bigram.in[ind2==x]$freq/freq.tot)
}
}
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
# naive backoff
if(!katz) {
freq.tot <- sum(trigram.wf$freq)
prob.trigram <- sapply(rev(predict.trigram), function(x) trigram.in[ind3==x]$freq/freq.tot)
}
}
predict.vector <- unique(c(predict.unigram, rev(predict.bigram), rev(predict.trigram)))
predict.vector <- rev(predict.vector)
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
# katz back-off for advanced search
if(katz) {
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
} else {
prob.vec <- unique(c(prob.unigram, prob.bigram, prob.trigram))
prob.vec <- rev(prob.vec)
}
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
} else {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, rev(predict.bigram))
# naive backoff
if(!katz) {
freq.tot <- sum(bigram.wf$freq)
prob.bigram <- sapply(rev(predict.bigram), function(x) bigram.in[ind2==x]$freq/freq.tot)
}
}
predict.vector <- rev(predict.vector)
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
# katz back-off
if(katz) {
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
} else {
prob.vec <- unique(c(prob.unigram, prob.bigram))
prob.vec <- rev(prob.vec)
}
}
# return a data table of word and probabilities
data.table(predictor = predict.words, probability = prob.vec)
}
nextWordPrediction("this is", TRUE)
nextWordPrediction("this is", FALSE)
nextWordPrediction <- function(rawinput, katz = TRUE) {
predict.unigram <- 3:1
# naive backoff
if(!katz) {
freq.tot <- sum(unigram.wf$freq)
prob.unigram <- sapply(predict.unigram, function(x) unigram.wf[index==x]$freq/freq.tot)
}
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
# naive backoff
if(!katz) {
freq.tot <- sum(bigram.wf$freq)
prob.bigram <- sapply(rev(predict.bigram), function(x) bigram.in[ind2==x]$freq/freq.tot)
}
}
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
# naive backoff
if(!katz) {
freq.tot <- sum(trigram.wf$freq)
prob.trigram <- sapply(rev(predict.trigram), function(x) trigram.in[ind3==x]$freq/freq.tot)
}
}
predict.vector <- unique(c(predict.unigram, rev(predict.bigram), rev(predict.trigram)))
predict.vector <- rev(predict.vector)
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
# katz back-off for advanced search
if(katz) {
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
} else {
prob.vec <- unique(c(prob.unigram, prob.bigram, prob.trigram))
prob.vec <- rev(prob.vec)
}
prob.df <- data.frame(predictor = predict.words, probability = prob.vec)
} else {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, rev(predict.bigram))
# naive backoff
if(!katz) {
freq.tot <- sum(bigram.wf$freq)
prob.bigram <- sapply(rev(predict.bigram), function(x) bigram.in[ind2==x]$freq/freq.tot)
}
}
predict.vector <- rev(predict.vector)
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
# katz back-off
if(katz) {
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
} else {
prob.vec <- unique(c(prob.unigram, prob.bigram))
prob.vec <- rev(prob.vec)
}
}
# return a data table of word and probabilities
data.table(predictor = predict.words, probability = prob.vec)
}
nextWordPrediction("this is", FALSE)
nextWordPrediction("this is", TRUE)
cc
cc[1:3,x] <- 0
cc[1:3,x] <- c(0,0,0)
cc[1:3,x]
cc[1:3]$x
cc[1:3]$x <- c(0,0,0)
cc[1,1] <- 0
cc
cc[x==0 & !(z %in% c(20, 19))]
head(unigram.wf)
runApp()
runApp()
runApp()
runApp()
katzWordPrediction <- function(rawinput) {
predict.vector <- 1:3
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
} else {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(10,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
}
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
# return a data table of word and probabilities
data.table(predictor = predict.words, probability = prob.vec)
}
katzWordPrediction("this is")
cleanInput <- function(input, maxN = 2) {
input <- tolower(input)
input <- gsub("[^[:alnum:][:space:]',.?!:-]", "", input)
input <- gsub("\\.", " \\. ", input)
input <- gsub("\\,", " \\, ", input)
input <- gsub("\\!", " \\! ", input)
input <- gsub("\\?", " \\? ", input)
input <- gsub("\\:", " \\: ", input)
input <- gsub("^[[:space:]]+", "", input)
input <- gsub("[[:space:]]+", " ", input)
# tokenize
words <- unlist(strsplit(input, split = " "))
# output bigram if sufficient words
# otherwise unigram
if(length(words) < maxN) {
isTrigram = FALSE
input <- sapply(input, function(wd) unigram.wf[words==wd, index])
return(list(input, isTrigram))
}else{
isTrigram = TRUE
bgn <- length(words)-maxN+1
end <- length(words)
tmpwords <- words[bgn:end]
tmpwords <- sapply(tmpwords, function(wd) unigram.wf[words==wd, index])
return(list(tmpwords, isTrigram))
}
}
cleanInput("this is")
cleanInput("this")
katzWordPrediction("this")
katzWordPrediction("this is")
katzWordPrediction <- function(rawinput) {
predict.vector <- 1:3
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
} else {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(10,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
}
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
# return a data table of word and probabilities
data.table(predictor = predict.words, probability = prob.vec)
}
katzWordPrediction("this is")
katzWordPrediction <- function(rawinput) {
predict.vector <- 1:3
input.list <- cleanInput(rawinput)
input <- input.list[[1]]
isTrigram <- input.list[[2]]
if(isTrigram == TRUE) {
# pre-selection of 20 words as candidate predict word
# bare Good-Turing discounted probabilities are used
bigram.in <- bigram.wf[ind1 == input[2]]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(5,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
trigram.in <- trigram.wf[ind1==input[1] & ind2==input[2]]
if(nrow(trigram.in)>0) {
trigram.in <- trigram.in[order(-freq*discount)]
predict.trigram <- trigram.in[1:min(5,nrow(trigram.in))]$ind3
predict.vector <- union(predict.vector, predict.trigram)
}
prob.vec <- sapply(predict.vector, function(x) probTrigramPredictor(input, x))
} else {
bigram.in <- bigram.wf[ind1 == input]
if(nrow(bigram.in)>0) {
bigram.in <- bigram.in[order(-freq*discount)]
predict.bigram <- bigram.in[1:min(10,nrow(bigram.in))]$ind2
predict.vector <- union(predict.vector, predict.bigram)
}
prob.vec <- sapply(predict.vector, function(x) probBigramPredictor(input, x))
}
predict.words <- sapply(predict.vector, function(ind) unigram.wf[index==ind, words])
# return a data table of word and probabilities
data.table(predictor = predict.words, probability = prob.vec)
}
katzWordPrediction("this")
katzWordPrediction("this is")
runApp()
input <- c('this is ')
input
input <- tolower(input)
input <- gsub("[^[:alnum:][:space:]',.?!:-]", "", input)
input <- gsub("\\.", " \\. ", input)
input <- gsub("\\,", " \\, ", input)
input <- gsub("\\!", " \\! ", input)
input <- gsub("\\?", " \\? ", input)
input <- gsub("\\:", " \\: ", input)
input <- gsub("^[[:space:]]+", "", input)
input <- gsub("[[:space:]]+", " ", input)
input
words <- unlist(strsplit(input, split = " "))
words
words
input <- c('this ')
input <- tolower(input)
input <- gsub("[^[:alnum:][:space:]',.?!:-]", "", input)
input <- gsub("\\.", " \\. ", input)
input <- gsub("\\,", " \\, ", input)
input <- gsub("\\!", " \\! ", input)
input <- gsub("\\?", " \\? ", input)
input <- gsub("\\:", " \\: ", input)
input <- gsub("^[[:space:]]+", "", input)
input <- gsub("[[:space:]]+", " ", input)
# tokenize
words <- unlist(strsplit(input, split = " "))
words
words
runApp()
q()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q()
